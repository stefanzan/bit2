load edu.ustb.sei.stlens.lib.bit.DictLab

type Type = {name:String, color:String}
type Node = {name:String, _type:String}
type Edge = {from:String, to:String}
type Graph = {direction:String, nodes:[Node], edges:[Edge],types:[Type]}

helper getId(n:String) = n+"__"+n.map_get("id", (x:String)->x.gen_uuid())
helper getColor(tn:String, g:Graph) = g.types.filter((x:Type)->x.name==tn).get(0).color

regex UUID = $[_a-zA-Z0-9]+$

template genTypedGraph(graph : Graph)
'''
digraph G {
    rankdir="«graph.direction|UUID»"
	node[fontname="Arial",style="rounded,filled",shape="box"]
	edge[fontname="Arial"]

    «FOR node : Node IN graph.nodes»
    «node.name.getId()|UUID»[label="«node.name|UUID»", fillcolor="«node._type.getColor(graph)|UUID»"]    
    «ENDFOR»

    «FOR edge : Edge IN graph.edges.filter((x:Edge)->x.from!=null && x.to!=null)»
    «edge.from.getId()|UUID» -> «edge.to.getId()|UUID»
    «ENDFOR»
}
'''