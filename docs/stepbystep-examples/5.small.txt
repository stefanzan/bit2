1. template program 
«var count = 1»
Output:«count»

2. core program
seq(declare(count,1), const("Output:"),space(1), exp(count), end)

3. evaluate to enhanced output

seq(
  declare(count,(1,1))
 ,const("Output:")
 ,space(1)
 ,exp((count,1))
 ,end
)

4. lambdalize
seq(
  \count.seq(const("Output:"),space(1),exp((count,1))) (1,1) declare
 ,end
)

5. evaluation
seq(const("Output:"),space(1),exp((count,1)),end)
Output: 1

----------------------------------------------------------------
update
replace "1" with "0" at 8 |> {} |- seq(\count.seq(const("Output:"), space(1), exp((count,1))) (1,1) declare, end)
--> replace "1" with "0" at 8 |> {} |- \count.seq(const("Output:"), space(1), exp((count,1))) (1,1) declare
    --> replace "1" with "0" at 8 |> {count -> (1,[])} |- seq(const("Output:"), space(1), exp((count,1)))
    --> replace "1" with "0" at 8 |> {count -> (1,[])} |- const("Output:")
    --> replace "1" with "0" at 8 |> {count -> (1,[])} |- const("Output:")
    --> replace "1" with "0" at 1 |> {count -> (1,[])} |- space(1)
    --> replace "1" with "0" at 0 |> {count -> (1,[])} |- exp((count,1))
        // sv="1", sv == s1, vs2="0", v' = strtoval("0")= 0
        0 |> {count -> (1,[])} |- count -> {count -> (0,[0])} |- count
    --> {count -> (0,[0])} |- exp((count,0));id
--> subgoal 1: {} U {count -> (0,[0])} |- seq(const("Output:"), space(1), exp((count,0)));id 
--> subgoal 2: 0 |> {} |- 1 -> {} |- 0
--> Finally: {} |- \count.seq(const("Output:"), space(1), exp((count,0))) (0,0) declare
