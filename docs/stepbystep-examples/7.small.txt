1. template program 
«var count = 1 »
Before: «count» 
After: «count» 

2. core program 
seq(
  declare(count,1)
 ,const("Before:")
 ,space(1)
 ,exp(count)
 ,const("\n")
 ,const("After:")
 ,space(1)
 ,exp(count)
 ,end
)

3. evaluate to enhanced output 
seq(
  declare(count,(1,1))
 ,const("Before:")
 ,space(1)
 ,exp((count,1))
 ,const("\n")
 ,const("After:")
 ,space(1)
 ,exp((count,1))
 ,end
)

4. lambdalize
seq(
  seq(\count.seq(
   ,const("Before:")
   ,space(1)
   ,exp((count,1))
   ,const("\n")
   ,const("After:")
   ,space(1)
   ,exp((count,1))
  ) (1,1) declare)
 ,end
 )

5. flatten
seq(
  \count.seq(
   const("Before:")
   ,space(1)
   ,exp((count,1))
   ,const("\n")
   ,const("After:")
   ,space(1)
   ,exp((count,1))
  ) (1,1) declare
 ,end
 )

6. evaluate
seq(const("Before:"),space(1),exp((count,1)),const("\n"),const("After:"),space(1),exp((count,1)),end)

Before: 1
After: 1

--------------------------------------------------------------
update 
(1) 同时将1改为不同的值
bulk(replace "1" with "0" at 8, replace "1" with "2" at 17) |> {} |- seq(\count.seq(const("Before:"),space(1),exp((count,1)),const("\n"),const("After:"),space(1),exp((count,1))) (1,1) declare,end )
--> bulk(replace "1" with "0" at 8, replace "1" with "2" at 17) |> {} |- seq(\count.seq(const("Before:"),space(1),exp((count,1)),const("\n"),const("After:"),space(1),exp((count,1))) (1,1) declare,end )
--> bulk(replace "1" with "0" at 8, replace "1" with "2" at 17) |> {} |- \count.seq(const("Before:"),space(1),exp((count,1)),const("\n"),const("After:"),space(1),exp((count,1))) (1,1) declare
--> bulk(replace "1" with "0" at 8, replace "1" with "2" at 17) |> {count->(1,[])} |- seq(const("Before:"),space(1),exp((count,1)),const("\n"),const("After:"),space(1),exp((count,1)))
--> bulk(replace "1" with "0" at 8, replace "1" with "2" at 17) |> {count->(1,[])} |- const("Before:")
    // 8 > len("Before:"), n' = 9-7=2
    // replace "1" with "0" at 8 |> {count->(1,[])} |- const("Before:") -> {count->(1,[])} |- const("Before:"); replace "1" with "0" at 1
    // n2' = 17 - (8-1) = 10
--> bulk(replace "1" with "0" at 1, replace "1" with "2" at 10) |> {count->(1,[])} |- space(1)
--> bulk(replace "1" with "0" at 0, replace "1" with "2" at 9) |> {count->(1,[])} |- exp((count,1))
    // sv=str(1)="1", sv==s1, vs2=strtoval("0")=0, 0 |>{count->(1,[])} |- count -> {count->(0,[0])} |- count
    // replace "1" with "0" at 0 |> {count->(1,[])} |- exp((count,1)) -> {count->(0,[0])} |-exp((count, 0));id
    // {count->(0,[0])} |- exp((count, 0)) => "0", n2' = 9 - len("0") = 8
--> bulk(id, replace "1" with "2" at 8) |> {count->(0,[0])} |- const("\n")
    // replace "1" with "2" at 8 |> {count->(0,[0])} |- const("\n") -> {count->(0,[0])} |- const("\n"); replace "1" with "2" at 7
--> bulk(id, replace "1" with "2" at 7) |> {count->(0,[0])} |- const("After:")
    // replace "1" with "2" at 7 |> {count->(0,[0])} |- const("After:") -> {count->(0,[0])} |- const("After:"); replace "1" with "2" at 1
--> bulk(id, replace "1" with "2" at 1) |> {count->(0,[0])} |- space(1)
--> bulk(id, replace "1" with "2" at 0) |> {count->(0,[0])} |- exp((count,1))
    // sv=str(1)="1", sv==s1, vs2=strtoval("2")=2, 2 |> {count->(0,[0])} |- count -> fail 
--> fail

